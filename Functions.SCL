FUNCTION publish : VOID
VAR_INPUT
    topic : STRING[50];
    retained : BOOL;
END_VAR
VAR_TEMP
    length : INT;
    i : INT;
    header : BYTE;
    holdstring : STRING[50];
END_VAR
BEGIN
holdstring := topic;
length := 5;
length := writeString(iStr := holdstring, pos := length);
FOR i := 0 TO 30 DO
    Data.buffer[length] := INT_TO_BYTE(65 + i);
    length := length + 1;
END_FOR;
header := INT_TO_BYTE(Globals.MQTTPUBLISH);
IF retained THEN
    header := header OR B#16#01;
END_IF;
write(header := header, length := length-5);
END_FUNCTION
(**************************************************************)

FUNCTION subscribe : VOID
VAR_INPUT
    topic : STRING[50];
END_VAR
VAR_TEMP
    length : INT;
    holdstring : STRING[50];
END_VAR
BEGIN
holdstring := topic;
IF (128 < (9 + LEN(holdstring))) THEN
    RETURN;
END_IF;
length := 5;
Data.nextMsgId := Data.nextMsgId + 1;
IF (Data.nextMsgId <= 0) THEN
    Data.nextMsgId := 1;
END_IF;
Data.buffer[length] := DWORD_TO_BYTE(SHR(IN := INT_TO_DWORD(Data.nextMsgId), N := 8));
length := length + 1;
Data.buffer[length] := INT_TO_BYTE(Data.nextMsgId) AND B#16#FF;
length := length + 1;
length := writeString(iStr := holdstring, pos := length);
Data.buffer[length] := 0; //qos 0
length := length + 1;
write(header := INT_TO_BYTE(Globals.MQTTSUBSCRIBE), length := length-5);
END_FUNCTION
(**************************************************************)

FUNCTION connect : VOID
VAR_INPUT
    id : STRING[20];
END_VAR
VAR_TEMP
    local_id : STRING[20];
    result : INT;
    length : INT;

    j : INT;
    d : ARRAY[0..6] OF BYTE;
    llen : INT;
    _len : INT;
END_VAR
BEGIN
local_id := id;
result := 0;
Data.nextMsgId := 1;
length := 5;
d[0]:=B#16#00;d[1]:=B#16#04;d[2]:=B#16#4D;d[3]:=B#16#51;d[4]:=B#16#54;d[5]:=B#16#54;d[6]:=B#16#04;

// header
FOR j := 0 TO 6 DO
    Data.buffer[length] := d[j];
    length := length + 1;
END_FOR;

// no user, pass, willTopic
Data.buffer[length] := B#16#00;
length := length + 1;

// timeout - TIME_TO_DINT gives ms
Data.buffer[length] := DWORD_TO_BYTE(SHR(IN := DINT_TO_DWORD(TIME_TO_DINT(Globals.MQTT_KEEPALIVE)/1000), N := 8));
length := length + 1;
Data.buffer[length] := DINT_TO_BYTE(TIME_TO_DINT(Globals.MQTT_KEEPALIVE)/1000);
length := length + 1;

// client id
length := writeString(iStr := local_id, pos := length);

// write conenct header
write(header := INT_TO_BYTE(Globals.MQTTCONNECT), length := length-5);

Data.lastInActivity := Data.runTime;
Data.lastOutActivity := Data.lastInActivity;

Data._state := Globals.MQTT_CONNECTING;
END_FUNCTION
(**************************************************************)