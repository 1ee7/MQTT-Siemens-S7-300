TYPE UDT100
TITLE = DISSASEMBLED ANYPOINTER
    STRUCT
        S7Code : BYTE; // Code for S7 = 0x10
        DataType : BYTE; // Code for data type = 0x02 = byte
        Length : INT; // Repetition factor = Send/receive length
        DBNumber : INT; // Data block Number
        MemoryArea : BYTE; // Specified memory area = 0x84 = data block
        ByteAddressMSB : BYTE; // Byte address most significant bits
        ByteAddressLSB : WORD; // Byte address least significant bits
    END_STRUCT
END_TYPE

(*
- implement Qos Level 1
- implement Qos Level 2
- implement message size 16k
*)
FUNCTION publish : VOID
VAR_INPUT
    topic : STRING[50];
    payload : ANY;
    payloadLength : INT;
    packetID : INT := 1; // only for QoS Level 1 and 2
    qos: INT := 0; // QoS Level 0,1,2
    retain : BOOL := false;
    duplicate : BOOL := false;
END_VAR
VAR_TEMP
    length : INT;
    i : INT;
    fixedHeader : BYTE;
    holdstring : STRING[50];
    
    tdata : ANY;
    pdata AT tdata : UDT100;
    
    ret : INT;
    
    tmpPacketID : INT;
    structTmpPacketId AT tmpPacketID : STRUCT
        byteLSB : BYTE;
        byteMSB : BYTE;
    END_STRUCT;
    
    ptrBuffer : ANY;
    structPtrBuffer AT ptrBuffer : UDT100;
    
    ptrPayload : ANY;
    structPtrPayload AT ptrPayload : UDT100;
END_VAR
BEGIN

// Fixed header, byte 1
// +--------+---+-----+---+---+----------+-----+-----+--------+
// |bit     | 7 |  6  | 5 | 4 |     3    |  2  |  1  |    0   |
// +--------+---+-----+---+---+----------+-----+-----+--------+
// |byte 1  | Message Type(3) | DUP Flag | QoS level | RETAIN |
// +--------+-----------------+----------+-----------+--------+

// set package type in header
fixedHeader := INT_TO_BYTE(Globals.MQTTPUBLISH);
// Set Header Flags for duplicates, qos level and retain
fixedHeader := fixedHeader OR SHL(IN:=BOOL_TO_BYTE(duplicate),N:=3) OR SHL(IN:=INT_TO_BYTE(qos),N:=1) OR BOOL_TO_BYTE(retain);


// Fixed header, byte 2
// +--------+---+---+---+---+---+---+---+---+
// |bit     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
// +--------+---+---+---+---+---+---+---+---+
// |bytes 2..4|   Remaining Length          |
// +--------+-------------------------------+

// Topic string length
// Variable header
// +--------+---+---+---+---+---+---+---+---+
// |bit     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
// +--------+---+---+---+---+---+---+---+---+
// |byte    |           Topic length MSB    |
// +~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
// |byte    |           Topic length LSB    |
// +~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

// Topic
// Variable header, byte 8...
// +--------+---+---+---+---+---+---+---+---+
// |bit     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
// +--------+---+---+---+---+---+---+---+---+
// |bytes    |           Topic              |
// +~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+

// point to buffer area in front of fixed header (5 bytes)
// copy topic to buffer
holdstring := topic;
length := 5;
length := writeString(iStr := holdstring, pos := length);

// MessageID  
// Variable header, byte 9
// +--------+---+---+---+---+---+---+---+---+
// |bit     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
// +--------+---+---+---+---+---+---+---+---+           
// |byte    |       Message ID LSB (0)      |
// +--------+-------------------------------+ 
// |byte    |       Message ID LSB (10)     |
// +--------+-------------------------------+

// set MessageID if qos level 1 or 2
tmpPacketID := packetID;
IF (qos = Globals.MQTTQOS1) OR (qos = Globals.MQTTQOS2) THEN
    Data.buffer[length] := structTmpPacketId.byteLSB;
    length := length + 1;
    Data.buffer[length] := structTmpPacketId.byteMSB;
    length := length + 1;
END_IF;

// Payload
// Variable header, byte 11...
// +--------+---+---+---+---+---+---+---+---+
// |bit     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
// +--------+---+---+---+---+---+---+---+---+           
// |bytes   |           Payload             |
// +~~~~~~~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+  
                             
// copy payload to buffer
//ptrBuffer := Data.buffer[length];
ptrPayload := payload;


IF payloadLength > 0 THEN
    FOR i:=0 TO payloadLength-1 DO
       ret := BLKMOV(SRCBLK := ptrPayload, DSTBLK := Data.buffer[length]); 
        // what is this?!
        IF ret <> 0 THEN
            m23.2 := true;
            //return
        END_IF;
        length := length + 1;
        structPtrPayload.ByteAddressLSB := INT_TO_WORD(WORD_TO_INT(structPtrPayload.ByteAddressLSB) + 8);
    END_FOR;
END_IF;

length := length;

// copy header information (includes remaining length calculation)
// and trigger tcpsend
write(header := fixedHeader, length := length-5);

END_FUNCTION
(**************************************************************)

FUNCTION subscribe : VOID
VAR_INPUT
    topic : STRING[50];
END_VAR
VAR_TEMP
    length : INT;
    holdstring : STRING[50];
END_VAR
BEGIN
holdstring := topic;
IF (128 < (9 + LEN(holdstring))) THEN
    RETURN;
END_IF;
length := 5;
Data.nextMsgId := Data.nextMsgId + 1;
IF (Data.nextMsgId <= 0) THEN
    Data.nextMsgId := 1;
END_IF;
Data.buffer[length] := DWORD_TO_BYTE(SHR(IN := INT_TO_DWORD(Data.nextMsgId), N := 8));
length := length + 1;
Data.buffer[length] := INT_TO_BYTE(Data.nextMsgId) AND B#16#FF;
length := length + 1;
length := writeString(iStr := holdstring, pos := length);
Data.buffer[length] := 0; //qos 0
length := length + 1;
write(header := INT_TO_BYTE(Globals.MQTTSUBSCRIBE), length := length-5);
END_FUNCTION
(**************************************************************)

FUNCTION connect : VOID
VAR_INPUT
    id : STRING[20];
END_VAR
VAR_TEMP
    local_id : STRING[20];
    result : INT;
    length : INT;

    j : INT;
    d : ARRAY[0..6] OF BYTE;
    llen : INT;
    _len : INT;
END_VAR
BEGIN
local_id := id;
result := 0;
Data.nextMsgId := 1;
length := 5;
d[0]:=B#16#00;d[1]:=B#16#04;d[2]:=B#16#4D;d[3]:=B#16#51;d[4]:=B#16#54;d[5]:=B#16#54;d[6]:=B#16#04;

// header
FOR j := 0 TO 6 DO
    Data.buffer[length] := d[j];
    length := length + 1;
END_FOR;

// no user, pass, willTopic
Data.buffer[length] := B#16#00;
length := length + 1;

// timeout - TIME_TO_DINT gives ms
Data.buffer[length] := DWORD_TO_BYTE(SHR(IN := DINT_TO_DWORD(TIME_TO_DINT(Globals.MQTT_KEEPALIVE)/1000), N := 8));
length := length + 1;
Data.buffer[length] := DINT_TO_BYTE(TIME_TO_DINT(Globals.MQTT_KEEPALIVE)/1000);
length := length + 1;

// client id
length := writeString(iStr := local_id, pos := length);

// write conenct header
write(header := INT_TO_BYTE(Globals.MQTTCONNECT), length := length-5);

Data.lastInActivity := Data.runTime;
Data.lastOutActivity := Data.lastInActivity;

Data._state := Globals.MQTT_CONNECTING;
END_FUNCTION
(**************************************************************)