(* Example Application Function Block calling MQTT *)
FUNCTION_BLOCK FB70
VAR_INPUT
    con : BOOL;     // Rise to Connect
    pub : BOOL;     // Rise to Publish
    sub : BOOL;     // Rise to Subscribe
END_VAR
VAR_TEMP
    i : INT;
END_VAR
VAR
    fcon, fpub, fsub : BOOL; // flags used for rising trigger detection

    publishData : ARRAY[0..31] OF BYTE;
END_VAR
BEGIN
(* USER INPUT CONTROLS *)

    // Manual connect. Make con high
    IF con AND NOT fcon THEN
        connect(id := 'CPU313C');
    END_IF;
    fcon := con;

    // Make pub high to publish
    IF pub AND NOT fpub THEN
        publish(topic := 'SIEMENSTOPIC', payload := publishData[0], packetID := 8, qos := Globals.MQTTQOS1,  retain := false, duplicate := true);
    END_IF;
    fpub := pub;

    // Make sub high to subscribe
    IF sub AND NOT fsub THEN
        subscribe(topic := 'Q');
    END_IF;
    fsub := sub;

(* OTHER *)

    // Automatic reconnect example if needed
    IF Data.ethConnected AND (Data._State < 0) THEN
        connect(id := 'CPU313C');
    END_IF;

    // Publish to 'Q' topic to control first output byte of PLC
    // Use sub command above to subscribe first
    // First byte of payload (0-7)  -> Output num
    // Second byte (0 or 1) -> Switch output ON/OFF
    IF DB71.callback THEN
        DB71.callback := false;
        IF DB71.pubTopic = 'Q' THEN
            IF DB71.payloadSize = 2 THEN
                ;//Q[0,BYTE_TO_INT(DB67.payload[0])] := BYTE_TO_BOOL(DB67.payload[1]);
            END_IF;
        END_IF;
    END_IF;

END_FUNCTION_BLOCK

(* OB1 Cyclic execution by PLC *)
ORGANIZATION_BLOCK OB1
VAR_TEMP
    // Reserved
    info : ARRAY[0..19] OF BYTE;
    // Temporary Variables
END_VAR

MQTT.DB71(NET_CONFIG:= DB72_NET_CONFIG);    // MQTT Library loop (Must be called in every App)
FB70.DB70();    // Example Application

END_ORGANIZATION_BLOCK
