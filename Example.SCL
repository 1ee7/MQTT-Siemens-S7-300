(* Example Application Function Block calling MQTT *)
FUNCTION_BLOCK FB70
VAR_INPUT
    con : BOOL;     // Rise to Connect
    discon : BOOL;  // Rise to Disconnect
    pub : BOOL;     // Rise to Publish
    sub : BOOL;     // Rise to Subscribe
    unsub : BOOL;   // Rise to Unsubscribe
    
END_VAR
VAR_TEMP
    i : INT;
END_VAR
VAR
    fcon, fpub, fsub,fdiscon,funsub : BOOL; // flags used for rising trigger detection

    publishData : ARRAY[0..1024] OF BYTE;
    receivedData : ARRAY[0..1024] OF BYTE;
    willData : ARRAY[0..128] OF BYTE;
    willDataLength : INT := 0;
    pubAckReceived : BOOL :=0;
    payloadInt : INT := 0;
    myPublishMessageID : INT := 0;
END_VAR
BEGIN
                   
(* USER INPUT CONTROLS *)

    // Manual connect. Make con high
    IF con AND NOT fcon THEN
        //connect(id := 'CPU313C');
        mqttCONNECT(clientID := 'CPU313C',withUsername:=false,withPassword:=false,cleanSession:=true,withWill:=true,willQos:=0,willRetain:=0,willTopic:='Connection Lost',willPayload:=willData[0],willPayloadLength:=0,username:='a',password:='b');

    END_IF;
    fcon := con;

    // Make discon high to disconnect
    IF discon AND NOT fdiscon THEN
        mqttDISCONNECT();
    END_IF;
    fdiscon := discon;
    
    // Make pub high to publish
    IF pub AND NOT fpub THEN
        myPublishMessageID := mqttPUBLISH(topic := 'SIEMENSTOPIC', payload := publishData[0], payloadLength := 800, qos := mqttGlobals.MQTTQOS2, retain := false, duplicate := false);
    END_IF;
    fpub := pub;

    // Make sub high to subscribe
    IF sub AND NOT fsub THEN
        mqttSUBSCRIBE(topic := 'SIEMENSTOPIC',topicQos := mqttGlobals.MQTTQOS0);
    END_IF;
    fsub := sub;
    
    // Make sub high to unsubscribe
    IF funsub AND NOT unsub THEN
        mqttUNSUBSCRIBE(topic := 'SIEMENSTOPIC');
    END_IF;
    funsub := unsub;

(* OTHER *)

    // Automatic reconnect example if needed
    IF mqttData.ethTCPConnected AND (mqttData._State < 0) THEN
        //connect(id := 'CPU313C');
        mqttCONNECT(clientID := 'CPU313C',withUsername:=false,withPassword:=false,cleanSession:=true,withWill:=true,willQos:=0,willRetain:=0,willTopic:='Connection Lost',willPayload:=willData[0],willPayloadLength:=0,username:='a',password:='b');
    END_IF;

    // Publish to 'Q' topic to control first output byte of PLC
    // Use sub command above to subscribe first
    // First byte of payload (0-7)  -> Output num
    // Second byte (0 or 1) -> Switch output ON/OFF
    IF DB71.callback THEN
        IF DB71.callbackPacketType = mqttGlobals.MQTTPUBLISH THEN
            DB71.callback := false;
            IF DB71.pubTopic = 'SIEMENSTOPIC' THEN
                IF DB71.payloadSize >= 1024 THEN
                     FOR i:=0 TO 1023 DO
                        receivedData[i] := DB71.payload[i];
                    END_FOR;               
                ELSE
                    FOR i:=0 TO DB71.payloadSize-1 DO
                        receivedData[i] := DB71.payload[i];
                    END_FOR;
               END_IF;
                
            END_IF;
        END_IF;
        
        // Example for Qos1 (Single stage handshake with PUBACK response) or Qo2 (Dual stage handshake with PUBCOMP response)
        IF (DB71.callbackPacketType = mqttGlobals.MQTTPUBACK) OR  (DB71.callbackPacketType = mqttGlobals.MQTTPUBCOMP) THEN
            DB71.callback := false;
            pubAckReceived := true;           
        END_IF;
    END_IF;
   

END_FUNCTION_BLOCK

(* OB1 Cyclic execution by PLC *)
ORGANIZATION_BLOCK OB1
VAR_TEMP
    // Reserved
    info : ARRAY[0..19] OF BYTE;
    // Temporary Variables
END_VAR

MQTT.DB71(net_config := DB_NET_CONFIG, PNorCP := 1, connectionID := 1, cpLADDR := W#16#100);    // MQTT Library loop (Must be called in every App)
FB70.DB70();    // Example Application


  
 
END_ORGANIZATION_BLOCK
